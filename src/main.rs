use hex::{FromHex, decode};
use kes_summed_ed25519::{PublicKey, kes::Sum6KesSig, traits::KesSig};


/* 
    I'm trying to verify the signature of block 9317023 on mainnet (https://cardanoscan.io/block/9317023)
    The data is fetched using Ogmios v5, and be located in ./block.json file.
    I'm assummed that I'll load signature byte (header.signature) to sig_kes using Sum6KesSig::from_bytes
    and then verify it with period, pk (header.opCert.hotVk), m (header.blockHash)
    
    But what I got at the end is Err(Ed25519Signature("signature error: Verification equation was not satisfied")).
    Could you help to guide me how to walk thought this issue?

    Thanks a lot for your time and effort.
 */

fn main() {
    println!("=============VERIFY SIGNATURE===========================");
    let slots_per_kes_period = 129600;
    let current_slot = 103710047;
    let current_period: u32 = current_slot/slots_per_kes_period;
    let start_kes_period = 759; // header.opCert.kesPeriod
    let period = current_period - start_kes_period;
    println!("period {:?}", period);

    // let header_hash = "c5dc9fe994ffc46b1d1a81dfa2af07b9b530a059bb03506ab41f439be3e0482d";
    let block_body_hash = "3a6d165f14f4d13b2a06c022cbd868a31d26bb02cb404ec098be915427394904";
    let block_body_hash_bytes =  &decode(&block_body_hash).unwrap()[..];
    println!("header_bytes {:?}", block_body_hash_bytes);

    let msg_bytes = [130, 138, 26, 0, 142, 42, 159, 26, 6, 46, 125, 95, 88, 32, 54, 118, 231, 22, 38, 157, 252, 232, 7, 116, 92, 247, 247, 139, 105, 102, 193, 166, 151, 156, 214, 213, 30, 249, 122, 209, 18, 41, 4, 75, 241, 113, 88, 32, 251, 187, 142, 197, 72, 126, 64, 238, 158, 50, 104, 102, 117, 177, 103, 47, 207, 84, 152, 83, 63, 25, 167, 120, 177, 170, 228, 96, 67, 75, 254, 174, 88, 32, 193, 254, 244, 65, 228, 193, 133, 157, 54, 11, 89, 123, 97, 64, 88, 171, 250, 189, 44, 132, 77, 186, 203, 189, 108, 13, 3, 160, 206, 122, 80, 51, 130, 88, 64, 8, 111, 8, 103, 93, 123, 56, 112, 172, 65, 173, 54, 165, 35, 196, 15, 244, 23, 36, 109, 64, 155, 76, 102, 58, 119, 14, 203, 116, 114, 142, 14, 148, 160, 243, 246, 253, 129, 173, 241, 13, 165, 203, 25, 147, 49, 168, 115, 44, 71, 5, 53, 17, 121, 97, 51, 145, 175, 244, 50, 71, 219, 113, 107, 88, 80, 29, 187, 170, 60, 66, 228, 71, 160, 172, 58, 103, 176, 64, 81, 37, 83, 45, 246, 33, 141, 94, 134, 108, 218, 145, 169, 156, 178, 16, 204, 32, 237, 245, 12, 166, 60, 236, 120, 103, 89, 145, 107, 38, 83, 112, 119, 152, 134, 224, 181, 68, 22, 154, 91, 171, 121, 181, 54, 143, 53, 110, 128, 170, 135, 6, 147, 206, 247, 253, 171, 146, 12, 91, 238, 9, 169, 33, 201, 31, 13, 25, 27, 254, 88, 32, 58, 109, 22, 95, 20, 244, 209, 59, 42, 6, 192, 34, 203, 216, 104, 163, 29, 38, 187, 2, 203, 64, 78, 192, 152, 190, 145, 84, 39, 57, 73, 4, 132, 88, 32, 95, 20, 3, 218, 199, 95, 32, 18, 83, 67, 76, 114, 206, 108, 90, 145, 223, 16, 90, 45, 160, 176, 27, 205, 83, 130, 2, 61, 90, 187, 142, 242, 11, 25, 2, 247, 88, 64, 26, 88, 161, 38, 149, 97, 69, 16, 40, 167, 199, 75, 248, 86, 102, 29, 215, 166, 3, 95, 49, 223, 101, 174, 45, 149, 122, 83, 25, 96, 110, 225, 205, 43, 27, 190, 196, 166, 35, 161, 120, 34, 218, 29, 126, 230, 174, 205, 62, 180, 95, 215, 38, 185, 174, 8, 179, 140, 148, 16, 202, 24, 187, 15, 130, 8, 0, 89, 1, 192, 139, 60, 113, 106, 171, 149, 246, 163, 170, 196, 191, 182, 221, 238, 142, 141, 42, 140, 82, 92, 0, 119, 57, 209, 70, 18, 170, 33, 89, 158, 46, 121, 77, 36, 86, 203, 15, 249, 18, 73, 251, 114, 254, 232, 245, 116, 241, 108, 14, 76, 177, 251, 163, 116, 150, 249, 7, 177, 10, 247, 27, 77, 149, 9, 113, 167, 86, 102, 222, 242, 49, 90, 205, 1, 84, 155, 47, 138, 93, 141, 227, 129, 232, 33, 3, 8, 101, 10, 179, 14, 79, 140, 122, 91, 233, 13, 150, 247, 66, 226, 42, 26, 215, 116, 56, 102, 162, 108, 56, 191, 135, 145, 61, 59, 82, 2, 198, 148, 196, 15, 68, 169, 25, 55, 37, 56, 19, 94, 210, 231, 149, 57, 202, 179, 232, 206, 100, 169, 95, 128, 174, 234, 182, 23, 111, 126, 63, 172, 52, 255, 34, 180, 227, 93, 103, 19, 159, 227, 2, 188, 228, 4, 22, 201, 51, 3, 39, 33, 235, 33, 37, 156, 96, 236, 109, 195, 138, 225, 245, 235, 73, 115, 94, 230, 12, 254, 53, 210, 16, 7, 163, 76, 64, 77, 226, 242, 121, 23, 152, 153, 33, 226, 62, 141, 45, 122, 227, 71, 161, 87, 231, 89, 154, 223, 177, 171, 209, 172, 5, 222, 116, 248, 126, 45, 250, 105, 137, 43, 197, 200, 207, 62, 99, 15, 161, 3, 82, 52, 16, 138, 149, 208, 2, 212, 126, 238, 19, 29, 172, 180, 172, 235, 128, 37, 109, 60, 132, 184, 135, 106, 96, 34, 19, 179, 245, 188, 20, 123, 37, 242, 106, 236, 118, 49, 28, 7, 9, 74, 59, 30, 144, 136, 227, 77, 86, 65, 25, 105, 146, 201, 105, 110, 201, 48, 167, 26, 6, 118, 233, 179, 167, 119, 116, 32, 191, 118, 175, 31, 1, 102, 190, 46, 240, 145, 222, 175, 102, 181, 231, 41, 178, 229, 202, 224, 177, 102, 229, 214, 146, 134, 253, 196, 219, 76, 137, 66, 118, 194, 176, 232, 104, 104, 114, 225, 112, 50, 86, 179, 123, 46, 140, 155, 19, 74, 25, 2, 168, 34, 75, 188, 217, 200, 45, 110, 251, 114, 116, 206, 59, 44, 97, 177, 37, 69, 4, 211, 12, 22, 86, 84, 147, 161, 7, 68, 253, 44, 67, 14, 97, 34, 219, 205, 70, 183, 143, 89, 89, 104, 180, 199, 71, 246, 234, 60, 251, 144, 247, 104, 81, 108, 227, 184, 221, 27, 113, 32, 172, 61, 142, 3, 126, 188, 151, 8, 206, 242, 251, 152, 198, 162, 110, 241, 25, 77, 56, 159, 99, 22, 229, 253, 180, 152, 202, 15, 244, 183, 42, 97];
    let msg_bytes = [130, 138, 26, 0, 142, 42, 159, 26, 6, 46, 125, 95, 88, 32, 54, 118, 231, 22, 38, 157, 252, 232, 7, 116, 92, 247, 247, 139, 105, 102, 193, 166, 151, 156, 214, 213, 30, 249, 122, 209, 18, 41, 4, 75, 241, 113, 88, 32, 251, 187, 142, 197, 72, 126, 64, 238, 158, 50, 104, 102, 117, 177, 103, 47, 207, 84, 152, 83, 63, 25, 167, 120, 177, 170, 228, 96, 67, 75, 254, 174, 88, 32, 193, 254, 244, 65, 228, 193, 133, 157, 54, 11, 89, 123, 97, 64, 88, 171, 250, 189, 44, 132, 77, 186, 203, 189, 108, 13, 3, 160, 206, 122, 80, 51, 130, 88, 64, 8, 111, 8, 103, 93, 123, 56, 112, 172, 65, 173, 54, 165, 35, 196, 15, 244, 23, 36, 109, 64, 155, 76, 102, 58, 119, 14, 203, 116, 114, 142, 14, 148, 160, 243, 246, 253, 129, 173, 241, 13, 165, 203, 25, 147, 49, 168, 115, 44, 71, 5, 53, 17, 121, 97, 51, 145, 175, 244, 50, 71, 219, 113, 107, 88, 80, 29, 187, 170, 60, 66, 228, 71, 160, 172, 58, 103, 176, 64, 81, 37, 83, 45, 246, 33, 141, 94, 134, 108, 218, 145, 169, 156, 178, 16, 204, 32, 237, 245, 12, 166, 60, 236, 120, 103, 89, 145, 107, 38, 83, 112, 119, 152, 134, 224, 181, 68, 22, 154, 91, 171, 121, 181, 54, 143, 53, 110, 128, 170, 135, 6, 147, 206, 247, 253, 171, 146, 12, 91, 238, 9, 169, 33, 201, 31, 13, 25, 27, 254, 88, 32, 58, 109, 22, 95, 20, 244, 209, 59, 42, 6, 192, 34, 203, 216, 104, 163, 29, 38, 187, 2, 203, 64, 78, 192, 152, 190, 145, 84, 39, 57, 73, 4, 132, 88, 32, 95, 20, 3, 218, 199, 95, 32, 18, 83, 67, 76, 114, 206, 108, 90, 145, 223, 16, 90, 45, 160, 176, 27, 205, 83, 130, 2, 61, 90, 187, 142, 242, 11, 25, 2, 247, 88, 64, 26, 88, 161, 38, 149, 97, 69, 16, 40, 167, 199, 75, 248, 86, 102, 29, 215, 166, 3, 95, 49, 223, 101, 174, 45, 149, 122, 83, 25, 96, 110, 225, 205, 43, 27, 190, 196, 166, 35, 161, 120, 34, 218, 29, 126, 230, 174, 205, 62, 180, 95, 215, 38, 185, 174, 8, 179, 140, 148, 16, 202, 24, 187, 15, 130, 8, 0, 89, 1, 192, 139, 60, 113, 106, 171, 149, 246, 163, 170, 196, 191, 182, 221, 238, 142, 141, 42, 140, 82, 92, 0, 119, 57, 209, 70, 18, 170, 33, 89, 158, 46, 121, 77, 36, 86, 203, 15, 249, 18, 73, 251, 114, 254, 232, 245, 116, 241, 108, 14, 76, 177, 251, 163, 116, 150, 249, 7, 177, 10, 247, 27, 77, 149, 9, 113, 167, 86, 102, 222, 242, 49, 90, 205, 1, 84, 155, 47, 138, 93, 141, 227, 129, 232, 33, 3, 8, 101, 10, 179, 14, 79, 140, 122, 91, 233, 13, 150, 247, 66, 226, 42, 26, 215, 116, 56, 102, 162, 108, 56, 191, 135, 145, 61, 59, 82, 2, 198, 148, 196, 15, 68, 169, 25, 55, 37, 56, 19, 94, 210, 231, 149, 57, 202, 179, 232, 206, 100, 169, 95, 128, 174, 234, 182, 23, 111, 126, 63, 172, 52, 255, 34, 180, 227, 93, 103, 19, 159, 227, 2, 188, 228, 4, 22, 201, 51, 3, 39, 33, 235, 33, 37, 156, 96, 236, 109, 195, 138, 225, 245, 235, 73, 115, 94, 230, 12, 254, 53, 210, 16, 7, 163, 76, 64, 77, 226, 242, 121, 23, 152, 153, 33, 226, 62, 141, 45, 122, 227, 71, 161, 87, 231, 89, 154, 223, 177, 171, 209, 172, 5, 222, 116, 248, 126, 45, 250, 105, 137, 43, 197, 200, 207, 62, 99, 15, 161, 3, 82, 52, 16, 138, 149, 208, 2, 212, 126, 238, 19, 29, 172, 180, 172, 235, 128, 37, 109, 60, 132, 184, 135, 106, 96, 34, 19, 179, 245, 188, 20, 123, 37, 242, 106, 236, 118, 49, 28, 7, 9, 74, 59, 30, 144, 136, 227, 77, 86, 65, 25, 105, 146, 201, 105, 110, 201, 48, 167, 26, 6, 118, 233, 179, 167, 119, 116, 32, 191, 118, 175, 31, 1, 102, 190, 46, 240, 145, 222, 175, 102, 181, 231, 41, 178, 229, 202, 224, 177, 102, 229, 214, 146, 134, 253, 196, 219, 76, 137, 66, 118, 194, 176, 232, 104, 104, 114, 225, 112, 50, 86, 179, 123, 46, 140, 155, 19, 74, 25, 2, 168, 34, 75, 188, 217, 200, 45, 110, 251, 114, 116, 206, 59, 44, 97, 177, 37, 69, 4, 211, 12, 22, 86, 84, 147, 161, 7, 68, 253, 44, 67, 14, 97, 34, 219, 205, 70, 183, 143, 89, 89, 104, 180, 199, 71, 246, 234, 60, 251, 144, 247, 104, 81, 108, 227, 184, 221, 27, 113, 32, 172, 61, 142, 3, 126, 188, 151, 8, 206, 242, 251, 152, 198, 162, 110, 241, 25, 77, 56, 159, 99, 22, 229, 253, 180, 152, 202, 15, 244, 183, 42, 97];
    
    let hot_vkey_bytes = &[95,20,3,218,199,95,32,18,83,67,76,114,206,108,90,145,223,16,90,45,160,176,27,205,83,130,2,61,90,187,142,242];
    let pk: PublicKey = PublicKey::from_bytes(hot_vkey_bytes).unwrap();

    let sig_bytes = [139,60,113,106,171,149,246,163,170,196,191,182,221,238,142,141,42,140,82,92,0,119,57,209,70,18,170,33,89,158,46,121,77,36,86,203,15,249,18,73,251,114,254,232,245,116,241,108,14,76,177,251,163,116,150,249,7,177,10,247,27,77,149,9,113,167,86,102,222,242,49,90,205,1,84,155,47,138,93,141,227,129,232,33,3,8,101,10,179,14,79,140,122,91,233,13,150,247,66,226,42,26,215,116,56,102,162,108,56,191,135,145,61,59,82,2,198,148,196,15,68,169,25,55,37,56,19,94,210,231,149,57,202,179,232,206,100,169,95,128,174,234,182,23,111,126,63,172,52,255,34,180,227,93,103,19,159,227,2,188,228,4,22,201,51,3,39,33,235,33,37,156,96,236,109,195,138,225,245,235,73,115,94,230,12,254,53,210,16,7,163,76,64,77,226,242,121,23,152,153,33,226,62,141,45,122,227,71,161,87,231,89,154,223,177,171,209,172,5,222,116,248,126,45,250,105,137,43,197,200,207,62,99,15,161,3,82,52,16,138,149,208,2,212,126,238,19,29,172,180,172,235,128,37,109,60,132,184,135,106,96,34,19,179,245,188,20,123,37,242,106,236,118,49,28,7,9,74,59,30,144,136,227,77,86,65,25,105,146,201,105,110,201,48,167,26,6,118,233,179,167,119,116,32,191,118,175,31,1,102,190,46,240,145,222,175,102,181,231,41,178,229,202,224,177,102,229,214,146,134,253,196,219,76,137,66,118,194,176,232,104,104,114,225,112,50,86,179,123,46,140,155,19,74,25,2,168,34,75,188,217,200,45,110,251,114,116,206,59,44,97,177,37,69,4,211,12,22,86,84,147,161,7,68,253,44,67,14,97,34,219,205,70,183,143,89,89,104,180,199,71,246,234,60,251,144,247,104,81,108,227,184,221,27,113,32,172,61,142,3,126,188,151,8,206,242,251,152,198,162,110,241,25,77,56,159,99,22,229,253,180,152,202,15,244,183,42,97];
    let sig_kes = Sum6KesSig::from_bytes(&sig_bytes).unwrap();

    let is_valid = sig_kes.verify(period, &pk, &msg_bytes);
    println!("Check valid with perid {:?} : {:?}", period, is_valid);


    // "==========================="
    // "mes: [126,119,104,190,104,162,143,46,7,0,229,109,55,124,231,224,192,153,190,58,134,96,26,98,53,27,185,155,105,52,186,244,5,229,111,73,203,237,247,86,137,114,50,180,46,72,91,154,190,76,87,251,1,43,70,211,166,14,142,48,186,218,166,182,150,62,102]"
    // "signableRepresentation: [126,119,104,190,104,162,143,46,7,0,229,109,55,124,231,224,192,153,190,58,134,96,26,98,53,27,185,155,105,52,186,244,5,229,111,73,203,237,247,86,137,114,50,180,46,72,91,154,190,76,87,251,1,43,70,211,166,14,142,48,186,218,166,182,150,62,102]"
    // "sig: [89,138,218,74,138,140,215,30,230,213,140,203,193,129,44,50,184,89,174,112,212,3,205,212,106,255,255,30,42,70,20,192,199,193,126,72,129,22,72,14,208,201,74,95,109,116,235,225,3,67,198,70,116,171,69,174,251,160,244,232,195,6,207,6,138,82,109,193,67,92,94,59,6,73,200,254,6,102,171,166,137,20,139,208,131,89,139,255,41,222,230,75,199,119,182,62,26,212,206,124,196,241,24,138,3,11,12,179,95,80,77,228,185,167,199,69,253,11,158,104,181,245,87,191,209,1,218,81,87,20,210,163,66,139,158,158,76,63,97,142,88,164,255,250,28,192,138,137,57,220,185,78,194,102,148,86,97,22,134,248,196,210,216,27,198,255,45,51,160,116,157,136,46,123,99,49,249,78,112,255,178,81,75,114,53,130,36,254,57,197,84,198,201,210,187,49,50,167,117,19,122,115,41,115,253,203,118,10,150,68,213,154,14,22,31,189,183,212,235,150,68,237,77,162,185,227,169,246,136,14,40,4,75,12,74,4,118,113,93,96,33,54,107,10,221,193,143,14,143,234,187,182,97,210,172,106,137,200,169,255,37,191,136,16,45,35,18,58,174,108,28,207,56,86,143,3,98,172,23,107,29,246,192,240,132,53,190,197,189,29,240,245,143,173,248,167,212,94,135,86,26,148,220,188,151,76,62,189,202,82,47,155,109,55,124,154,68,220,174,15,112,11,71,73,227,8,239,153,216,132,201,125,55,163,198,251,152,70,81,101,236,204,240,4,103,218,24,62,169,55,198,9,231,101,178,104,188,236,133,230,195,52,110,106,215,59,160,212,195,136,55,251,122,4,222,142,139,128,70,193,202,192,138,63,221,129,28,113,67,170,47,233,95,204,173,150,211,32,217,255,38,58,203,22,128,136,61,107,37,102,71,249,235,178,70,195,217,95,241,154,161,187,198,136,115,211,141,54,137,128,208,13,55,75,229,51,64,82,252,78,70,137,82,3,217,71,91,99]"
    // "t: 62"
    // "vk: VerKeySumKES \"4a9c03cf17f2b41065889e0e7ca37a52d3ba365398f685e1b619475d07f6a23b\""
    // "==========================="

    // let t= 62;
    // let msg2 = [126,119,104,190,104,162,143,46,7,0,229,109,55,124,231,224,192,153,190,58,134,96,26,98,53,27,185,155,105,52,186,244,5,229,111,73,203,237,247,86,137,114,50,180,46,72,91,154,190,76,87,251,1,43,70,211,166,14,142,48,186,218,166,182,150,62,102];
    // let sig_bytes2 = [89,138,218,74,138,140,215,30,230,213,140,203,193,129,44,50,184,89,174,112,212,3,205,212,106,255,255,30,42,70,20,192,199,193,126,72,129,22,72,14,208,201,74,95,109,116,235,225,3,67,198,70,116,171,69,174,251,160,244,232,195,6,207,6,138,82,109,193,67,92,94,59,6,73,200,254,6,102,171,166,137,20,139,208,131,89,139,255,41,222,230,75,199,119,182,62,26,212,206,124,196,241,24,138,3,11,12,179,95,80,77,228,185,167,199,69,253,11,158,104,181,245,87,191,209,1,218,81,87,20,210,163,66,139,158,158,76,63,97,142,88,164,255,250,28,192,138,137,57,220,185,78,194,102,148,86,97,22,134,248,196,210,216,27,198,255,45,51,160,116,157,136,46,123,99,49,249,78,112,255,178,81,75,114,53,130,36,254,57,197,84,198,201,210,187,49,50,167,117,19,122,115,41,115,253,203,118,10,150,68,213,154,14,22,31,189,183,212,235,150,68,237,77,162,185,227,169,246,136,14,40,4,75,12,74,4,118,113,93,96,33,54,107,10,221,193,143,14,143,234,187,182,97,210,172,106,137,200,169,255,37,191,136,16,45,35,18,58,174,108,28,207,56,86,143,3,98,172,23,107,29,246,192,240,132,53,190,197,189,29,240,245,143,173,248,167,212,94,135,86,26,148,220,188,151,76,62,189,202,82,47,155,109,55,124,154,68,220,174,15,112,11,71,73,227,8,239,153,216,132,201,125,55,163,198,251,152,70,81,101,236,204,240,4,103,218,24,62,169,55,198,9,231,101,178,104,188,236,133,230,195,52,110,106,215,59,160,212,195,136,55,251,122,4,222,142,139,128,70,193,202,192,138,63,221,129,28,113,67,170,47,233,95,204,173,150,211,32,217,255,38,58,203,22,128,136,61,107,37,102,71,249,235,178,70,195,217,95,241,154,161,187,198,136,115,211,141,54,137,128,208,13,55,75,229,51,64,82,252,78,70,137,82,3,217,71,91,99];
    // let sig_kes2 = Sum6KesSig::from_bytes(&sig_bytes2).unwrap();
    // let vk2 = "4a9c03cf17f2b41065889e0e7ca37a52d3ba365398f685e1b619475d07f6a23b";
    // let vk2_bytes = &decode(vk2).unwrap()[..];
    // let pk2: PublicKey = PublicKey::from_bytes(vk2_bytes).unwrap();
    // println!("pk2 {:?}", pk2);

    // let is_valid2 = sig_kes2.verify(t, &pk2, &msg2);
    // println!("Check valid with perid {:?} : {:?}", t, is_valid2);

    let t= 1;
    let msg2 = [138,25,39,126,26,0,3,30,10,88,32,127,193,147,45,146,155,36,208,53,90,225,71,181,10,144,22,29,223,67,209,88,0,140,39,107,18,50,153,207,130,175,102,88,32,151,74,171,35,142,129,36,2,220,157,188,227,61,210,130,3,174,109,246,134,22,41,10,27,74,172,52,126,136,16,87,187,88,32,176,134,68,191,110,217,212,4,186,148,201,186,146,153,162,171,83,243,108,87,192,44,56,19,159,33,56,182,199,19,2,199,130,88,64,1,105,16,103,29,31,160,178,213,36,135,148,3,43,187,48,26,104,132,38,189,219,161,101,191,209,10,223,202,238,25,47,36,195,194,134,7,255,118,15,140,91,11,113,226,106,134,81,159,152,210,119,136,241,22,175,212,121,119,177,219,34,210,0,88,80,1,50,223,164,206,44,1,92,80,39,231,220,5,148,187,171,76,4,205,213,252,105,236,227,48,196,161,112,86,205,55,43,122,8,132,227,49,105,247,248,96,203,87,24,94,0,200,209,28,59,31,254,92,37,232,249,160,22,96,5,74,83,211,6,24,249,254,25,94,106,64,250,151,178,119,36,47,77,8,8,4,88,32,41,87,29,22,240,129,112,155,60,72,101,24,96,7,123,235,249,52,10,187,63,199,19,52,67,197,79,31,90,94,220,241,132,88,32,70,93,173,140,8,236,254,147,47,112,191,40,121,3,210,209,151,58,194,36,246,28,208,249,145,78,208,82,133,63,115,107,0,0,88,64,44,249,177,82,58,87,15,90,51,51,225,166,2,211,33,46,24,123,30,75,107,20,123,124,188,148,101,112,57,222,126,121,232,202,109,201,100,203,115,104,177,53,201,96,113,81,231,21,210,234,156,202,217,243,245,80,7,123,121,250,63,100,209,9,130,7,0];
    let sig_bytes2 = [8,18,249,39,38,128,141,128,202,97,139,98,23,193,62,207,127,229,255,73,204,118,175,50,53,11,6,93,120,212,8,190,227,161,219,192,49,48,72,116,231,157,6,202,216,133,66,28,169,219,179,62,118,234,4,141,206,187,149,149,185,39,222,6,111,81,128,4,127,255,218,239,234,99,55,178,56,64,135,9,88,115,186,45,9,186,116,209,232,38,187,238,193,72,226,219,25,236,177,219,46,109,40,116,140,240,108,211,103,17,209,111,188,237,127,162,213,224,193,17,24,50,195,105,130,25,107,65,134,250,70,107,130,40,252,241,112,86,245,224,6,237,82,37,56,199,237,50,173,135,36,211,198,63,84,67,144,112,129,245,245,79,114,134,140,177,71,93,5,187,121,209,26,76,106,187,237,84,60,72,152,252,47,21,122,235,153,173,178,124,49,202,15,11,191,105,4,64,162,67,231,41,136,12,188,222,215,252,119,143,49,204,135,55,145,41,107,30,67,248,124,134,158,25,127,31,211,69,253,243,104,19,108,147,108,83,18,76,170,216,120,99,121,161,148,211,179,72,117,43,144,219,253,209,25,154,12,119,239,194,42,50,126,7,78,46,192,30,172,43,249,22,154,151,214,92,200,38,251,232,39,208,218,4,94,91,104,9,83,177,122,71,178,64,181,229,38,83,173,73,93,108,169,5,19,241,16,213,168,53,62,146,180,22,39,58,27,188,5,233,203,41,152,179,241,15,27,170,171,222,132,34,102,195,30,222,18,137,174,18,18,204,154,229,122,0,38,42,218,22,220,214,98,244,12,144,238,16,50,224,13,212,182,209,241,122,9,86,81,124,140,56,195,84,203,101,177,107,246,172,229,209,208,86,230,147,61,148,169,153,175,226,42,14,140,191,59,129,81,224,112,115,179,67,170,102,50,96,127,22,213,120,169,78,79,59,112,80,194,238,94,67,169,39,159,217,7,227,222,183,91,36,76,183,7,66,59,6,215,26,185,59,96,182,252,35,250,40];
    let sig_kes2 = Sum6KesSig::from_bytes(&sig_bytes2).unwrap();
    let vk2 = "465dad8c08ecfe932f70bf287903d2d1973ac224f61cd0f9914ed052853f736b";
    let vk2_bytes = &decode(vk2).unwrap()[..];
    let pk2: PublicKey = PublicKey::from_bytes(vk2_bytes).unwrap();
    println!("pk2 {:?}", pk2);

    let is_valid2 = sig_kes2.verify(t, &pk2, &msg2);
    println!("Check valid with perid {:?} : {:?}", t, is_valid2);

    // Event try to bruceforce the period, didn't success
    // for i in 0..65535 {
    //     // println!("i {:?}", i);
    //     let is_v = sig_kes.verify(i, &pk, &msg_bytes);
    //     match is_v {
    //         Err(..) => {},
    //         Ok(..) => {println!("valid!!!");}
    //     }
    // }
    println!("=============END VERIFY SIGNATURE===========================");

}
